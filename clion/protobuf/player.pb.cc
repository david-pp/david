// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class WeaponProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeaponProto> {
} _WeaponProto_default_instance_;
class PlayerProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerProto> {
} _PlayerProto_default_instance_;
class WeaponDynProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeaponDynProto> {
} _WeaponDynProto_default_instance_;
class PlayerDynProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerDynProto> {
} _PlayerDynProto_default_instance_;
class WeaponDyn2ProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeaponDyn2Proto> {
} _WeaponDyn2Proto_default_instance_;
class PlayerDyn2ProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerDyn2Proto> {
} _PlayerDyn2Proto_default_instance_;

namespace protobuf_player_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponProto, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponProto, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, quests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, weapon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, weapons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, weapons_map_),
  3,
  0,
  ~0u,
  2,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDynProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDynProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDynProto, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDynProto, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDynProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDynProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDynProto, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDynProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDynProto, weapon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDynProto, weapons_map_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDyn2Proto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDyn2Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDyn2Proto, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDyn2Proto, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDyn2Proto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDyn2Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDyn2Proto, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDyn2Proto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDyn2Proto, weapon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDyn2Proto, weapons_map_),
  3,
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(WeaponProto)},
  { 8, 18, sizeof(PlayerProto)},
  { 24, 30, sizeof(WeaponDynProto)},
  { 32, 40, sizeof(PlayerDynProto)},
  { 44, 50, sizeof(WeaponDyn2Proto)},
  { 52, 60, sizeof(PlayerDyn2Proto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeaponProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeaponDynProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerDynProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeaponDyn2Proto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerDyn2Proto_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "player.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _WeaponProto_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PlayerProto_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _WeaponDynProto_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PlayerDynProto_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _WeaponDyn2Proto_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _PlayerDyn2Proto_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _WeaponProto_default_instance_.DefaultConstruct();
  _PlayerProto_default_instance_.DefaultConstruct();
  _WeaponDynProto_default_instance_.DefaultConstruct();
  _PlayerDynProto_default_instance_.DefaultConstruct();
  _WeaponDyn2Proto_default_instance_.DefaultConstruct();
  _PlayerDyn2Proto_default_instance_.DefaultConstruct();
  _PlayerProto_default_instance_.get_mutable()->weapon_ = const_cast< ::WeaponProto*>(
      ::WeaponProto::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014player.proto\")\n\013WeaponProto\022\014\n\004type\030\001 "
      "\001(\r\022\014\n\004name\030\002 \001(\t\"\211\001\n\013PlayerProto\022\n\n\002id\030"
      "\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\016\n\006quests\030\003 \003(\r\022\034\n\006w"
      "eapon\030\004 \001(\0132\014.WeaponProto\022\035\n\007weapons\030\005 \003"
      "(\0132\014.WeaponProto\022\023\n\013weapons_map\030\006 \001(\014\",\n"
      "\016WeaponDynProto\022\014\n\004type\030\001 \001(\r\022\014\n\004name\030\002 "
      "\001(\014\"O\n\016PlayerDynProto\022\n\n\002id\030\001 \001(\r\022\014\n\004nam"
      "e\030\002 \001(\014\022\016\n\006weapon\030\003 \001(\014\022\023\n\013weapons_map\030\004"
      " \001(\014\"-\n\017WeaponDyn2Proto\022\014\n\004type\030\001 \001(\r\022\014\n"
      "\004name\030\002 \001(\014\"P\n\017PlayerDyn2Proto\022\n\n\002id\030\001 \001"
      "(\r\022\014\n\004name\030\002 \001(\014\022\016\n\006weapon\030\003 \001(\014\022\023\n\013weap"
      "ons_map\030\004 \001(\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 453);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_player_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeaponProto::kTypeFieldNumber;
const int WeaponProto::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeaponProto::WeaponProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_player_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WeaponProto)
}
WeaponProto::WeaponProto(const WeaponProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:WeaponProto)
}

void WeaponProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

WeaponProto::~WeaponProto() {
  // @@protoc_insertion_point(destructor:WeaponProto)
  SharedDtor();
}

void WeaponProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WeaponProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponProto::descriptor() {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[0].descriptor;
}

const WeaponProto& WeaponProto::default_instance() {
  protobuf_player_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeaponProto* WeaponProto::New(::google::protobuf::Arena* arena) const {
  WeaponProto* n = new WeaponProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeaponProto::Clear() {
// @@protoc_insertion_point(message_clear_start:WeaponProto)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeaponProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WeaponProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "WeaponProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WeaponProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WeaponProto)
  return false;
#undef DO_
}

void WeaponProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WeaponProto)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WeaponProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WeaponProto)
}

::google::protobuf::uint8* WeaponProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WeaponProto)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "WeaponProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WeaponProto)
  return target;
}

size_t WeaponProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WeaponProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WeaponProto)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeaponProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WeaponProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WeaponProto)
    MergeFrom(*source);
  }
}

void WeaponProto::MergeFrom(const WeaponProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WeaponProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void WeaponProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WeaponProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponProto::CopyFrom(const WeaponProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WeaponProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponProto::IsInitialized() const {
  return true;
}

void WeaponProto::Swap(WeaponProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeaponProto::InternalSwap(WeaponProto* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeaponProto::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeaponProto

// optional uint32 type = 1;
bool WeaponProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WeaponProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void WeaponProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void WeaponProto::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 WeaponProto::type() const {
  // @@protoc_insertion_point(field_get:WeaponProto.type)
  return type_;
}
void WeaponProto::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WeaponProto.type)
}

// optional string name = 2;
bool WeaponProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeaponProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void WeaponProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeaponProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& WeaponProto::name() const {
  // @@protoc_insertion_point(field_get:WeaponProto.name)
  return name_.GetNoArena();
}
void WeaponProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WeaponProto.name)
}
#if LANG_CXX11
void WeaponProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WeaponProto.name)
}
#endif
void WeaponProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WeaponProto.name)
}
void WeaponProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WeaponProto.name)
}
::std::string* WeaponProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:WeaponProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeaponProto::release_name() {
  // @@protoc_insertion_point(field_release:WeaponProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeaponProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WeaponProto.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerProto::kIdFieldNumber;
const int PlayerProto::kNameFieldNumber;
const int PlayerProto::kQuestsFieldNumber;
const int PlayerProto::kWeaponFieldNumber;
const int PlayerProto::kWeaponsFieldNumber;
const int PlayerProto::kWeaponsMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerProto::PlayerProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_player_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerProto)
}
PlayerProto::PlayerProto(const PlayerProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      quests_(from.quests_),
      weapons_(from.weapons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  weapons_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weapons_map()) {
    weapons_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weapons_map_);
  }
  if (from.has_weapon()) {
    weapon_ = new ::WeaponProto(*from.weapon_);
  } else {
    weapon_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:PlayerProto)
}

void PlayerProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weapons_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&weapon_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&weapon_) + sizeof(id_));
}

PlayerProto::~PlayerProto() {
  // @@protoc_insertion_point(destructor:PlayerProto)
  SharedDtor();
}

void PlayerProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weapons_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete weapon_;
  }
}

void PlayerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerProto::descriptor() {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[1].descriptor;
}

const PlayerProto& PlayerProto::default_instance() {
  protobuf_player_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerProto* PlayerProto::New(::google::protobuf::Arena* arena) const {
  PlayerProto* n = new PlayerProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerProto)
  quests_.Clear();
  weapons_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_weapons_map()) {
      GOOGLE_DCHECK(!weapons_map_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weapons_map_.UnsafeRawStringPointer())->clear();
    }
    if (has_weapon()) {
      GOOGLE_DCHECK(weapon_ != NULL);
      weapon_->::WeaponProto::Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PlayerProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 quests = 3;
      case 3: {
        if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_quests())));
        } else if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_quests())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .WeaponProto weapon = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .WeaponProto weapons = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_weapons()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional bytes weapons_map = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_weapons_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerProto)
  return false;
#undef DO_
}

void PlayerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerProto)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated uint32 quests = 3;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->quests(i), output);
  }

  // optional .WeaponProto weapon = 4;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->weapon_, output);
  }

  // repeated .WeaponProto weapons = 5;
  for (unsigned int i = 0, n = this->weapons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->weapons(i), output);
  }

  // optional bytes weapons_map = 6;
  if (has_weapons_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->weapons_map(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerProto)
}

::google::protobuf::uint8* PlayerProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlayerProto)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PlayerProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated uint32 quests = 3;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->quests(i), target);
  }

  // optional .WeaponProto weapon = 4;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->weapon_, false, target);
  }

  // repeated .WeaponProto weapons = 5;
  for (unsigned int i = 0, n = this->weapons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->weapons(i), false, target);
  }

  // optional bytes weapons_map = 6;
  if (has_weapons_map()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->weapons_map(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerProto)
  return target;
}

size_t PlayerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 quests = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->quests_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->quests_size());
    total_size += data_size;
  }

  // repeated .WeaponProto weapons = 5;
  {
    unsigned int count = this->weapons_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapons(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes weapons_map = 6;
    if (has_weapons_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->weapons_map());
    }

    // optional .WeaponProto weapon = 4;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weapon_);
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerProto)
    MergeFrom(*source);
  }
}

void PlayerProto::MergeFrom(const PlayerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  quests_.MergeFrom(from.quests_);
  weapons_.MergeFrom(from.weapons_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_weapons_map()) {
      set_has_weapons_map();
      weapons_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weapons_map_);
    }
    if (from.has_weapon()) {
      mutable_weapon()->::WeaponProto::MergeFrom(from.weapon());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void PlayerProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerProto::CopyFrom(const PlayerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerProto::IsInitialized() const {
  return true;
}

void PlayerProto::Swap(PlayerProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerProto::InternalSwap(PlayerProto* other) {
  quests_.UnsafeArenaSwap(&other->quests_);
  weapons_.UnsafeArenaSwap(&other->weapons_);
  name_.Swap(&other->name_);
  weapons_map_.Swap(&other->weapons_map_);
  std::swap(weapon_, other->weapon_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerProto::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerProto

// optional uint32 id = 1;
bool PlayerProto::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerProto::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 PlayerProto::id() const {
  // @@protoc_insertion_point(field_get:PlayerProto.id)
  return id_;
}
void PlayerProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PlayerProto.id)
}

// optional string name = 2;
bool PlayerProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PlayerProto::name() const {
  // @@protoc_insertion_point(field_get:PlayerProto.name)
  return name_.GetNoArena();
}
void PlayerProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerProto.name)
}
#if LANG_CXX11
void PlayerProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerProto.name)
}
#endif
void PlayerProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerProto.name)
}
void PlayerProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerProto.name)
}
::std::string* PlayerProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:PlayerProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerProto::release_name() {
  // @@protoc_insertion_point(field_release:PlayerProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.name)
}

// repeated uint32 quests = 3;
int PlayerProto::quests_size() const {
  return quests_.size();
}
void PlayerProto::clear_quests() {
  quests_.Clear();
}
::google::protobuf::uint32 PlayerProto::quests(int index) const {
  // @@protoc_insertion_point(field_get:PlayerProto.quests)
  return quests_.Get(index);
}
void PlayerProto::set_quests(int index, ::google::protobuf::uint32 value) {
  quests_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayerProto.quests)
}
void PlayerProto::add_quests(::google::protobuf::uint32 value) {
  quests_.Add(value);
  // @@protoc_insertion_point(field_add:PlayerProto.quests)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerProto::quests() const {
  // @@protoc_insertion_point(field_list:PlayerProto.quests)
  return quests_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerProto::mutable_quests() {
  // @@protoc_insertion_point(field_mutable_list:PlayerProto.quests)
  return &quests_;
}

// optional .WeaponProto weapon = 4;
bool PlayerProto::has_weapon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerProto::set_has_weapon() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerProto::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerProto::clear_weapon() {
  if (weapon_ != NULL) weapon_->::WeaponProto::Clear();
  clear_has_weapon();
}
const ::WeaponProto& PlayerProto::weapon() const {
  // @@protoc_insertion_point(field_get:PlayerProto.weapon)
  return weapon_ != NULL ? *weapon_
                         : *::WeaponProto::internal_default_instance();
}
::WeaponProto* PlayerProto::mutable_weapon() {
  set_has_weapon();
  if (weapon_ == NULL) {
    weapon_ = new ::WeaponProto;
  }
  // @@protoc_insertion_point(field_mutable:PlayerProto.weapon)
  return weapon_;
}
::WeaponProto* PlayerProto::release_weapon() {
  // @@protoc_insertion_point(field_release:PlayerProto.weapon)
  clear_has_weapon();
  ::WeaponProto* temp = weapon_;
  weapon_ = NULL;
  return temp;
}
void PlayerProto::set_allocated_weapon(::WeaponProto* weapon) {
  delete weapon_;
  weapon_ = weapon;
  if (weapon) {
    set_has_weapon();
  } else {
    clear_has_weapon();
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.weapon)
}

// repeated .WeaponProto weapons = 5;
int PlayerProto::weapons_size() const {
  return weapons_.size();
}
void PlayerProto::clear_weapons() {
  weapons_.Clear();
}
const ::WeaponProto& PlayerProto::weapons(int index) const {
  // @@protoc_insertion_point(field_get:PlayerProto.weapons)
  return weapons_.Get(index);
}
::WeaponProto* PlayerProto::mutable_weapons(int index) {
  // @@protoc_insertion_point(field_mutable:PlayerProto.weapons)
  return weapons_.Mutable(index);
}
::WeaponProto* PlayerProto::add_weapons() {
  // @@protoc_insertion_point(field_add:PlayerProto.weapons)
  return weapons_.Add();
}
::google::protobuf::RepeatedPtrField< ::WeaponProto >*
PlayerProto::mutable_weapons() {
  // @@protoc_insertion_point(field_mutable_list:PlayerProto.weapons)
  return &weapons_;
}
const ::google::protobuf::RepeatedPtrField< ::WeaponProto >&
PlayerProto::weapons() const {
  // @@protoc_insertion_point(field_list:PlayerProto.weapons)
  return weapons_;
}

// optional bytes weapons_map = 6;
bool PlayerProto::has_weapons_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerProto::set_has_weapons_map() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerProto::clear_has_weapons_map() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerProto::clear_weapons_map() {
  weapons_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weapons_map();
}
const ::std::string& PlayerProto::weapons_map() const {
  // @@protoc_insertion_point(field_get:PlayerProto.weapons_map)
  return weapons_map_.GetNoArena();
}
void PlayerProto::set_weapons_map(const ::std::string& value) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerProto.weapons_map)
}
#if LANG_CXX11
void PlayerProto::set_weapons_map(::std::string&& value) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerProto.weapons_map)
}
#endif
void PlayerProto::set_weapons_map(const char* value) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerProto.weapons_map)
}
void PlayerProto::set_weapons_map(const void* value, size_t size) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerProto.weapons_map)
}
::std::string* PlayerProto::mutable_weapons_map() {
  set_has_weapons_map();
  // @@protoc_insertion_point(field_mutable:PlayerProto.weapons_map)
  return weapons_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerProto::release_weapons_map() {
  // @@protoc_insertion_point(field_release:PlayerProto.weapons_map)
  clear_has_weapons_map();
  return weapons_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerProto::set_allocated_weapons_map(::std::string* weapons_map) {
  if (weapons_map != NULL) {
    set_has_weapons_map();
  } else {
    clear_has_weapons_map();
  }
  weapons_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weapons_map);
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.weapons_map)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeaponDynProto::kTypeFieldNumber;
const int WeaponDynProto::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeaponDynProto::WeaponDynProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_player_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WeaponDynProto)
}
WeaponDynProto::WeaponDynProto(const WeaponDynProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:WeaponDynProto)
}

void WeaponDynProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

WeaponDynProto::~WeaponDynProto() {
  // @@protoc_insertion_point(destructor:WeaponDynProto)
  SharedDtor();
}

void WeaponDynProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WeaponDynProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponDynProto::descriptor() {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[2].descriptor;
}

const WeaponDynProto& WeaponDynProto::default_instance() {
  protobuf_player_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeaponDynProto* WeaponDynProto::New(::google::protobuf::Arena* arena) const {
  WeaponDynProto* n = new WeaponDynProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeaponDynProto::Clear() {
// @@protoc_insertion_point(message_clear_start:WeaponDynProto)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeaponDynProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WeaponDynProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WeaponDynProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WeaponDynProto)
  return false;
#undef DO_
}

void WeaponDynProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WeaponDynProto)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WeaponDynProto)
}

::google::protobuf::uint8* WeaponDynProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WeaponDynProto)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WeaponDynProto)
  return target;
}

size_t WeaponDynProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WeaponDynProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponDynProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WeaponDynProto)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponDynProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeaponDynProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WeaponDynProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WeaponDynProto)
    MergeFrom(*source);
  }
}

void WeaponDynProto::MergeFrom(const WeaponDynProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WeaponDynProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void WeaponDynProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WeaponDynProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponDynProto::CopyFrom(const WeaponDynProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WeaponDynProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponDynProto::IsInitialized() const {
  return true;
}

void WeaponDynProto::Swap(WeaponDynProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeaponDynProto::InternalSwap(WeaponDynProto* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeaponDynProto::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeaponDynProto

// optional uint32 type = 1;
bool WeaponDynProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WeaponDynProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void WeaponDynProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void WeaponDynProto::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 WeaponDynProto::type() const {
  // @@protoc_insertion_point(field_get:WeaponDynProto.type)
  return type_;
}
void WeaponDynProto::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WeaponDynProto.type)
}

// optional bytes name = 2;
bool WeaponDynProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeaponDynProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void WeaponDynProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeaponDynProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& WeaponDynProto::name() const {
  // @@protoc_insertion_point(field_get:WeaponDynProto.name)
  return name_.GetNoArena();
}
void WeaponDynProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WeaponDynProto.name)
}
#if LANG_CXX11
void WeaponDynProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WeaponDynProto.name)
}
#endif
void WeaponDynProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WeaponDynProto.name)
}
void WeaponDynProto::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WeaponDynProto.name)
}
::std::string* WeaponDynProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:WeaponDynProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeaponDynProto::release_name() {
  // @@protoc_insertion_point(field_release:WeaponDynProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeaponDynProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WeaponDynProto.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerDynProto::kIdFieldNumber;
const int PlayerDynProto::kNameFieldNumber;
const int PlayerDynProto::kWeaponFieldNumber;
const int PlayerDynProto::kWeaponsMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerDynProto::PlayerDynProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_player_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerDynProto)
}
PlayerDynProto::PlayerDynProto(const PlayerDynProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  weapon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weapon()) {
    weapon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weapon_);
  }
  weapons_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weapons_map()) {
    weapons_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weapons_map_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:PlayerDynProto)
}

void PlayerDynProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weapon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weapons_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

PlayerDynProto::~PlayerDynProto() {
  // @@protoc_insertion_point(destructor:PlayerDynProto)
  SharedDtor();
}

void PlayerDynProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weapon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weapons_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerDynProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDynProto::descriptor() {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[3].descriptor;
}

const PlayerDynProto& PlayerDynProto::default_instance() {
  protobuf_player_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerDynProto* PlayerDynProto::New(::google::protobuf::Arena* arena) const {
  PlayerDynProto* n = new PlayerDynProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerDynProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerDynProto)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_weapon()) {
      GOOGLE_DCHECK(!weapon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weapon_.UnsafeRawStringPointer())->clear();
    }
    if (has_weapons_map()) {
      GOOGLE_DCHECK(!weapons_map_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weapons_map_.UnsafeRawStringPointer())->clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerDynProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerDynProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes weapon = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_weapon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes weapons_map = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_weapons_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerDynProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerDynProto)
  return false;
#undef DO_
}

void PlayerDynProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerDynProto)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional bytes weapon = 3;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->weapon(), output);
  }

  // optional bytes weapons_map = 4;
  if (has_weapons_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->weapons_map(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerDynProto)
}

::google::protobuf::uint8* PlayerDynProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlayerDynProto)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes weapon = 3;
  if (has_weapon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->weapon(), target);
  }

  // optional bytes weapons_map = 4;
  if (has_weapons_map()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->weapons_map(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerDynProto)
  return target;
}

size_t PlayerDynProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerDynProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes weapon = 3;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->weapon());
    }

    // optional bytes weapons_map = 4;
    if (has_weapons_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->weapons_map());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDynProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerDynProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDynProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerDynProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerDynProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerDynProto)
    MergeFrom(*source);
  }
}

void PlayerDynProto::MergeFrom(const PlayerDynProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerDynProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_weapon()) {
      set_has_weapon();
      weapon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weapon_);
    }
    if (from.has_weapons_map()) {
      set_has_weapons_map();
      weapons_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weapons_map_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void PlayerDynProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerDynProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDynProto::CopyFrom(const PlayerDynProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerDynProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDynProto::IsInitialized() const {
  return true;
}

void PlayerDynProto::Swap(PlayerDynProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerDynProto::InternalSwap(PlayerDynProto* other) {
  name_.Swap(&other->name_);
  weapon_.Swap(&other->weapon_);
  weapons_map_.Swap(&other->weapons_map_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerDynProto::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerDynProto

// optional uint32 id = 1;
bool PlayerDynProto::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerDynProto::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerDynProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerDynProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 PlayerDynProto::id() const {
  // @@protoc_insertion_point(field_get:PlayerDynProto.id)
  return id_;
}
void PlayerDynProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PlayerDynProto.id)
}

// optional bytes name = 2;
bool PlayerDynProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerDynProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerDynProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerDynProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PlayerDynProto::name() const {
  // @@protoc_insertion_point(field_get:PlayerDynProto.name)
  return name_.GetNoArena();
}
void PlayerDynProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerDynProto.name)
}
#if LANG_CXX11
void PlayerDynProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerDynProto.name)
}
#endif
void PlayerDynProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerDynProto.name)
}
void PlayerDynProto::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerDynProto.name)
}
::std::string* PlayerDynProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:PlayerDynProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerDynProto::release_name() {
  // @@protoc_insertion_point(field_release:PlayerDynProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerDynProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PlayerDynProto.name)
}

// optional bytes weapon = 3;
bool PlayerDynProto::has_weapon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerDynProto::set_has_weapon() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerDynProto::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerDynProto::clear_weapon() {
  weapon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weapon();
}
const ::std::string& PlayerDynProto::weapon() const {
  // @@protoc_insertion_point(field_get:PlayerDynProto.weapon)
  return weapon_.GetNoArena();
}
void PlayerDynProto::set_weapon(const ::std::string& value) {
  set_has_weapon();
  weapon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerDynProto.weapon)
}
#if LANG_CXX11
void PlayerDynProto::set_weapon(::std::string&& value) {
  set_has_weapon();
  weapon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerDynProto.weapon)
}
#endif
void PlayerDynProto::set_weapon(const char* value) {
  set_has_weapon();
  weapon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerDynProto.weapon)
}
void PlayerDynProto::set_weapon(const void* value, size_t size) {
  set_has_weapon();
  weapon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerDynProto.weapon)
}
::std::string* PlayerDynProto::mutable_weapon() {
  set_has_weapon();
  // @@protoc_insertion_point(field_mutable:PlayerDynProto.weapon)
  return weapon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerDynProto::release_weapon() {
  // @@protoc_insertion_point(field_release:PlayerDynProto.weapon)
  clear_has_weapon();
  return weapon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerDynProto::set_allocated_weapon(::std::string* weapon) {
  if (weapon != NULL) {
    set_has_weapon();
  } else {
    clear_has_weapon();
  }
  weapon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weapon);
  // @@protoc_insertion_point(field_set_allocated:PlayerDynProto.weapon)
}

// optional bytes weapons_map = 4;
bool PlayerDynProto::has_weapons_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerDynProto::set_has_weapons_map() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerDynProto::clear_has_weapons_map() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerDynProto::clear_weapons_map() {
  weapons_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weapons_map();
}
const ::std::string& PlayerDynProto::weapons_map() const {
  // @@protoc_insertion_point(field_get:PlayerDynProto.weapons_map)
  return weapons_map_.GetNoArena();
}
void PlayerDynProto::set_weapons_map(const ::std::string& value) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerDynProto.weapons_map)
}
#if LANG_CXX11
void PlayerDynProto::set_weapons_map(::std::string&& value) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerDynProto.weapons_map)
}
#endif
void PlayerDynProto::set_weapons_map(const char* value) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerDynProto.weapons_map)
}
void PlayerDynProto::set_weapons_map(const void* value, size_t size) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerDynProto.weapons_map)
}
::std::string* PlayerDynProto::mutable_weapons_map() {
  set_has_weapons_map();
  // @@protoc_insertion_point(field_mutable:PlayerDynProto.weapons_map)
  return weapons_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerDynProto::release_weapons_map() {
  // @@protoc_insertion_point(field_release:PlayerDynProto.weapons_map)
  clear_has_weapons_map();
  return weapons_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerDynProto::set_allocated_weapons_map(::std::string* weapons_map) {
  if (weapons_map != NULL) {
    set_has_weapons_map();
  } else {
    clear_has_weapons_map();
  }
  weapons_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weapons_map);
  // @@protoc_insertion_point(field_set_allocated:PlayerDynProto.weapons_map)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeaponDyn2Proto::kTypeFieldNumber;
const int WeaponDyn2Proto::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeaponDyn2Proto::WeaponDyn2Proto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_player_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:WeaponDyn2Proto)
}
WeaponDyn2Proto::WeaponDyn2Proto(const WeaponDyn2Proto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:WeaponDyn2Proto)
}

void WeaponDyn2Proto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

WeaponDyn2Proto::~WeaponDyn2Proto() {
  // @@protoc_insertion_point(destructor:WeaponDyn2Proto)
  SharedDtor();
}

void WeaponDyn2Proto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WeaponDyn2Proto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponDyn2Proto::descriptor() {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[4].descriptor;
}

const WeaponDyn2Proto& WeaponDyn2Proto::default_instance() {
  protobuf_player_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeaponDyn2Proto* WeaponDyn2Proto::New(::google::protobuf::Arena* arena) const {
  WeaponDyn2Proto* n = new WeaponDyn2Proto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeaponDyn2Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:WeaponDyn2Proto)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeaponDyn2Proto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WeaponDyn2Proto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WeaponDyn2Proto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WeaponDyn2Proto)
  return false;
#undef DO_
}

void WeaponDyn2Proto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WeaponDyn2Proto)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WeaponDyn2Proto)
}

::google::protobuf::uint8* WeaponDyn2Proto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WeaponDyn2Proto)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WeaponDyn2Proto)
  return target;
}

size_t WeaponDyn2Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WeaponDyn2Proto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponDyn2Proto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WeaponDyn2Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const WeaponDyn2Proto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeaponDyn2Proto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WeaponDyn2Proto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WeaponDyn2Proto)
    MergeFrom(*source);
  }
}

void WeaponDyn2Proto::MergeFrom(const WeaponDyn2Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WeaponDyn2Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void WeaponDyn2Proto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WeaponDyn2Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponDyn2Proto::CopyFrom(const WeaponDyn2Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WeaponDyn2Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponDyn2Proto::IsInitialized() const {
  return true;
}

void WeaponDyn2Proto::Swap(WeaponDyn2Proto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeaponDyn2Proto::InternalSwap(WeaponDyn2Proto* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeaponDyn2Proto::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeaponDyn2Proto

// optional uint32 type = 1;
bool WeaponDyn2Proto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WeaponDyn2Proto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void WeaponDyn2Proto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void WeaponDyn2Proto::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 WeaponDyn2Proto::type() const {
  // @@protoc_insertion_point(field_get:WeaponDyn2Proto.type)
  return type_;
}
void WeaponDyn2Proto::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WeaponDyn2Proto.type)
}

// optional bytes name = 2;
bool WeaponDyn2Proto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeaponDyn2Proto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void WeaponDyn2Proto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeaponDyn2Proto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& WeaponDyn2Proto::name() const {
  // @@protoc_insertion_point(field_get:WeaponDyn2Proto.name)
  return name_.GetNoArena();
}
void WeaponDyn2Proto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WeaponDyn2Proto.name)
}
#if LANG_CXX11
void WeaponDyn2Proto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WeaponDyn2Proto.name)
}
#endif
void WeaponDyn2Proto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WeaponDyn2Proto.name)
}
void WeaponDyn2Proto::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WeaponDyn2Proto.name)
}
::std::string* WeaponDyn2Proto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:WeaponDyn2Proto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeaponDyn2Proto::release_name() {
  // @@protoc_insertion_point(field_release:WeaponDyn2Proto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeaponDyn2Proto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WeaponDyn2Proto.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerDyn2Proto::kIdFieldNumber;
const int PlayerDyn2Proto::kNameFieldNumber;
const int PlayerDyn2Proto::kWeaponFieldNumber;
const int PlayerDyn2Proto::kWeaponsMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerDyn2Proto::PlayerDyn2Proto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_player_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerDyn2Proto)
}
PlayerDyn2Proto::PlayerDyn2Proto(const PlayerDyn2Proto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  weapon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weapon()) {
    weapon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weapon_);
  }
  weapons_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weapons_map()) {
    weapons_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weapons_map_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:PlayerDyn2Proto)
}

void PlayerDyn2Proto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weapon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weapons_map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

PlayerDyn2Proto::~PlayerDyn2Proto() {
  // @@protoc_insertion_point(destructor:PlayerDyn2Proto)
  SharedDtor();
}

void PlayerDyn2Proto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weapon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weapons_map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerDyn2Proto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDyn2Proto::descriptor() {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[5].descriptor;
}

const PlayerDyn2Proto& PlayerDyn2Proto::default_instance() {
  protobuf_player_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerDyn2Proto* PlayerDyn2Proto::New(::google::protobuf::Arena* arena) const {
  PlayerDyn2Proto* n = new PlayerDyn2Proto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerDyn2Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerDyn2Proto)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_weapon()) {
      GOOGLE_DCHECK(!weapon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weapon_.UnsafeRawStringPointer())->clear();
    }
    if (has_weapons_map()) {
      GOOGLE_DCHECK(!weapons_map_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weapons_map_.UnsafeRawStringPointer())->clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerDyn2Proto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerDyn2Proto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes weapon = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_weapon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes weapons_map = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_weapons_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerDyn2Proto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerDyn2Proto)
  return false;
#undef DO_
}

void PlayerDyn2Proto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerDyn2Proto)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional bytes weapon = 3;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->weapon(), output);
  }

  // optional bytes weapons_map = 4;
  if (has_weapons_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->weapons_map(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerDyn2Proto)
}

::google::protobuf::uint8* PlayerDyn2Proto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlayerDyn2Proto)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes weapon = 3;
  if (has_weapon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->weapon(), target);
  }

  // optional bytes weapons_map = 4;
  if (has_weapons_map()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->weapons_map(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerDyn2Proto)
  return target;
}

size_t PlayerDyn2Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerDyn2Proto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes weapon = 3;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->weapon());
    }

    // optional bytes weapons_map = 4;
    if (has_weapons_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->weapons_map());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDyn2Proto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerDyn2Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDyn2Proto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerDyn2Proto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerDyn2Proto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerDyn2Proto)
    MergeFrom(*source);
  }
}

void PlayerDyn2Proto::MergeFrom(const PlayerDyn2Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerDyn2Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_weapon()) {
      set_has_weapon();
      weapon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weapon_);
    }
    if (from.has_weapons_map()) {
      set_has_weapons_map();
      weapons_map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weapons_map_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void PlayerDyn2Proto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerDyn2Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDyn2Proto::CopyFrom(const PlayerDyn2Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerDyn2Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDyn2Proto::IsInitialized() const {
  return true;
}

void PlayerDyn2Proto::Swap(PlayerDyn2Proto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerDyn2Proto::InternalSwap(PlayerDyn2Proto* other) {
  name_.Swap(&other->name_);
  weapon_.Swap(&other->weapon_);
  weapons_map_.Swap(&other->weapons_map_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerDyn2Proto::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerDyn2Proto

// optional uint32 id = 1;
bool PlayerDyn2Proto::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerDyn2Proto::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerDyn2Proto::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerDyn2Proto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 PlayerDyn2Proto::id() const {
  // @@protoc_insertion_point(field_get:PlayerDyn2Proto.id)
  return id_;
}
void PlayerDyn2Proto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PlayerDyn2Proto.id)
}

// optional bytes name = 2;
bool PlayerDyn2Proto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerDyn2Proto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerDyn2Proto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerDyn2Proto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PlayerDyn2Proto::name() const {
  // @@protoc_insertion_point(field_get:PlayerDyn2Proto.name)
  return name_.GetNoArena();
}
void PlayerDyn2Proto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerDyn2Proto.name)
}
#if LANG_CXX11
void PlayerDyn2Proto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerDyn2Proto.name)
}
#endif
void PlayerDyn2Proto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerDyn2Proto.name)
}
void PlayerDyn2Proto::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerDyn2Proto.name)
}
::std::string* PlayerDyn2Proto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:PlayerDyn2Proto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerDyn2Proto::release_name() {
  // @@protoc_insertion_point(field_release:PlayerDyn2Proto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerDyn2Proto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PlayerDyn2Proto.name)
}

// optional bytes weapon = 3;
bool PlayerDyn2Proto::has_weapon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerDyn2Proto::set_has_weapon() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerDyn2Proto::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerDyn2Proto::clear_weapon() {
  weapon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weapon();
}
const ::std::string& PlayerDyn2Proto::weapon() const {
  // @@protoc_insertion_point(field_get:PlayerDyn2Proto.weapon)
  return weapon_.GetNoArena();
}
void PlayerDyn2Proto::set_weapon(const ::std::string& value) {
  set_has_weapon();
  weapon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerDyn2Proto.weapon)
}
#if LANG_CXX11
void PlayerDyn2Proto::set_weapon(::std::string&& value) {
  set_has_weapon();
  weapon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerDyn2Proto.weapon)
}
#endif
void PlayerDyn2Proto::set_weapon(const char* value) {
  set_has_weapon();
  weapon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerDyn2Proto.weapon)
}
void PlayerDyn2Proto::set_weapon(const void* value, size_t size) {
  set_has_weapon();
  weapon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerDyn2Proto.weapon)
}
::std::string* PlayerDyn2Proto::mutable_weapon() {
  set_has_weapon();
  // @@protoc_insertion_point(field_mutable:PlayerDyn2Proto.weapon)
  return weapon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerDyn2Proto::release_weapon() {
  // @@protoc_insertion_point(field_release:PlayerDyn2Proto.weapon)
  clear_has_weapon();
  return weapon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerDyn2Proto::set_allocated_weapon(::std::string* weapon) {
  if (weapon != NULL) {
    set_has_weapon();
  } else {
    clear_has_weapon();
  }
  weapon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weapon);
  // @@protoc_insertion_point(field_set_allocated:PlayerDyn2Proto.weapon)
}

// optional bytes weapons_map = 4;
bool PlayerDyn2Proto::has_weapons_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerDyn2Proto::set_has_weapons_map() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerDyn2Proto::clear_has_weapons_map() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerDyn2Proto::clear_weapons_map() {
  weapons_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weapons_map();
}
const ::std::string& PlayerDyn2Proto::weapons_map() const {
  // @@protoc_insertion_point(field_get:PlayerDyn2Proto.weapons_map)
  return weapons_map_.GetNoArena();
}
void PlayerDyn2Proto::set_weapons_map(const ::std::string& value) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerDyn2Proto.weapons_map)
}
#if LANG_CXX11
void PlayerDyn2Proto::set_weapons_map(::std::string&& value) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerDyn2Proto.weapons_map)
}
#endif
void PlayerDyn2Proto::set_weapons_map(const char* value) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerDyn2Proto.weapons_map)
}
void PlayerDyn2Proto::set_weapons_map(const void* value, size_t size) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerDyn2Proto.weapons_map)
}
::std::string* PlayerDyn2Proto::mutable_weapons_map() {
  set_has_weapons_map();
  // @@protoc_insertion_point(field_mutable:PlayerDyn2Proto.weapons_map)
  return weapons_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerDyn2Proto::release_weapons_map() {
  // @@protoc_insertion_point(field_release:PlayerDyn2Proto.weapons_map)
  clear_has_weapons_map();
  return weapons_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerDyn2Proto::set_allocated_weapons_map(::std::string* weapons_map) {
  if (weapons_map != NULL) {
    set_has_weapons_map();
  } else {
    clear_has_weapons_map();
  }
  weapons_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weapons_map);
  // @@protoc_insertion_point(field_set_allocated:PlayerDyn2Proto.weapons_map)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
